/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.importnfe.view;

import br.com.swconsultoria.nfe.schema_4.consReciNFe.TNfeProc;
import br.com.swconsultoria.nfe.util.XmlNfeUtil;
import com.importnfe.model.Nfe;
import com.importnfe.util.Util;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.bind.JAXBException;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author daniel
 */
public class FrmMain extends javax.swing.JFrame {

    /**
     * Creates new form FrmMain
     */
    public FrmMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuImport = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("Arquivos");

        jMenuImport.setText("Importar Notas");
        jMenuImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuImportActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuImport);
        jMenu1.add(jSeparator2);

        jMenuItem3.setText("Sair");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuImportActionPerformed
        // TODO add your handling code here:
        List<Nfe> nfes = new ArrayList<>();

        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(new JFrame());
        File[] files = chooser.getSelectedFiles();
        for (File file : files) {
            try {
                String xml = Util.readFile(file.getAbsolutePath(), Charset.defaultCharset());
                TNfeProc tNfe = XmlNfeUtil.xmlToObject(xml, TNfeProc.class);
                Nfe nfe = Util.montaObjeto(tNfe);
                nfes.add(nfe);
            } catch (IOException | JAXBException ex) {
                Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            criaArquivoExcel(nfes);
        } catch (IOException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuImportActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        System.exit(EXIT_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FrmMain main = new FrmMain();
                main.setExtendedState(JFrame.MAXIMIZED_BOTH);
                main.setVisible(true);
            }
        });
    }

    public void criaArquivoExcel(List<Nfe> lista) throws IOException {
        JFrame frame = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        int userSelection = fileChooser.showSaveDialog(frame);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            HSSFWorkbook workbook = new HSSFWorkbook();
            HSSFSheet sheetNotas = workbook.createSheet("NotasFiscais");
            int rowNum = 0;
            Row row = sheetNotas.createRow(rowNum++);
            List<String> titulos = Util.listaTituloColuna();
            for (int i = 0; i < titulos.size(); i++) {
                row.createCell(i).setCellValue(titulos.get(i));
            }
            
            List<Nfe> notas = lista;
            
            for (Nfe nota : notas) {
                //Row row = sheetNotas.createRow(rowNum++);
                row = sheetNotas.createRow(rowNum++);
                int cellNum = 0;
                Cell cellChNfe = row.createCell(cellNum++);
                cellChNfe.setCellValue(nota.getChNFe());

                Cell cellNatOp = row.createCell(cellNum++);
                cellNatOp.setCellValue(nota.getNatOp());

                Cell cellMod = row.createCell(cellNum++);
                cellMod.setCellValue(nota.getMod());

                Cell cellSerie = row.createCell(cellNum++);
                cellSerie.setCellValue(nota.getSerie());

                Cell cellNnf = row.createCell(cellNum++);
                cellNnf.setCellValue(nota.getnFat());

                Cell cellDhEmi = row.createCell(cellNum++);
                cellDhEmi.setCellValue(nota.getDhEmi());

                Cell cellTpNf = row.createCell(cellNum++);
                cellTpNf.setCellValue(nota.getTpNF());

                Cell cellEmiteCnpj = row.createCell(cellNum++);
                cellEmiteCnpj.setCellValue(nota.getEmitCnpj());

                Cell cellEmiteIe = row.createCell(cellNum++);
                cellEmiteIe.setCellValue(nota.getEmitIe());

                Cell cellEmiteUf = row.createCell(cellNum++);
                cellEmiteUf.setCellValue(nota.getEmitUf());

                Cell cellEmiteNome = row.createCell(cellNum++);
                cellEmiteNome.setCellValue(nota.getEmitNome());

                Cell cellEmiteFant = row.createCell(cellNum++);
                cellEmiteFant.setCellValue(nota.getEmitFant());

                Cell cellDestCnpj = row.createCell(cellNum++);
                cellDestCnpj.setCellValue(nota.getDestCnpj());

                Cell cellDestCpf = row.createCell(cellNum++);
                cellDestCpf.setCellValue(nota.getDestCpf());

                Cell cellDestIe = row.createCell(cellNum++);
                cellDestIe.setCellValue(nota.getDestIe());

                Cell cellDestIsuf = row.createCell(cellNum++);
                cellDestIsuf.setCellValue(nota.getDestIsuf());

                Cell cellDestUf = row.createCell(cellNum++);
                cellDestUf.setCellValue(nota.getDestUf());

                Cell cellDestNome = row.createCell(cellNum++);
                cellDestNome.setCellValue(nota.getDestNome());

                Cell cellvNf = row.createCell(cellNum++);
                cellvNf.setCellValue(nota.getvNF());

                Cell cellvBc = row.createCell(cellNum++);
                cellvBc.setCellValue(nota.getvBC());

                Cell cellvICMS = row.createCell(cellNum++);
                cellvICMS.setCellValue(nota.getvICMS());

                Cell cellvICMSDeson = row.createCell(cellNum++);
                cellvICMSDeson.setCellValue(nota.getvICMSDeson());

                Cell cellvBCST = row.createCell(cellNum++);
                cellvBCST.setCellValue(nota.getvBCST());

                Cell cellvProd = row.createCell(cellNum++);
                cellvProd.setCellValue(nota.getvProd());

                Cell cellvFrete = row.createCell(cellNum++);
                cellvFrete.setCellValue(nota.getvFrete());

                Cell cellvSeg = row.createCell(cellNum++);
                cellvSeg.setCellValue(nota.getvSeg());

                Cell cellvDesc = row.createCell(cellNum++);
                cellvDesc.setCellValue(nota.getvDesc());

                Cell cellvII = row.createCell(cellNum++);
                cellvII.setCellValue(nota.getvII());

                Cell cellvIPI = row.createCell(cellNum++);
                cellvIPI.setCellValue(nota.getvIPI());

                Cell cellvPIS = row.createCell(cellNum++);
                cellvPIS.setCellValue(nota.getvPIS());

                Cell cellvCOFINS = row.createCell(cellNum++);
                cellvCOFINS.setCellValue(nota.getvCOFINS());

                Cell cellvOutro = row.createCell(cellNum++);
                cellvOutro.setCellValue(nota.getvOutro());

                Cell cellvTotTrib = row.createCell(cellNum++);
                cellvTotTrib.setCellValue(nota.getvOutro());

                Cell cellnFat = row.createCell(cellNum++);
                cellnFat.setCellValue(nota.getnFat());

                Cell cellvOrig = row.createCell(cellNum++);
                cellvOrig.setCellValue(nota.getvOrig());

                Cell cellvDescFat = row.createCell(cellNum++);
                cellvDescFat.setCellValue(nota.getvDescFat());

                Cell cellvLiq = row.createCell(cellNum++);
                cellvLiq.setCellValue(nota.getvLiq());

                Cell cellnDup = row.createCell(cellNum++);
                cellnDup.setCellValue(nota.getnDup());

                Cell celldVenc = row.createCell(cellNum++);
                celldVenc.setCellValue(nota.getdVenc() != null ? nota.getdVenc().toString() : "0000-00-00");

                Cell cellvDup = row.createCell(cellNum++);
                cellvDup.setCellValue(nota.getvDup());

            }

            try {
                try (FileOutputStream out = new FileOutputStream(new File(fileToSave.getAbsolutePath() + ".xlsx"))) {
                    workbook.write(out);
                }
                JOptionPane.showMessageDialog(null, "Arquivo Excel criado com sucesso!");

            } catch (FileNotFoundException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Arquivo não gerado: " + e.getMessage());
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuImport;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
